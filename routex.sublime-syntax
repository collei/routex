%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Jeht Routex
file_extensions: [routex]
scope: source.routex

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: verbs
    - include: handlers
    - include: uris
    - include: numbers
    - include: strings

  keywords:
    # Keywords are with, without, any, prefix, controller, name and middleware.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\s?(with|without|any|prefix|controller|name|middleware)\s'
      scope: keyword.control.routex

  verbs:
    # Verbs are get, post, put, patch, head, options, delete.
    - match: '\s?(get|post|put|patch|head|options|delete)\s'
      scope: keyword.control.routex

  handlers:
    # URIs are partial
    - match: '\s(\w+(\@\w+)?)\s'
      scope: constant.numeric.routex
      exclude: verbs

  uris:
    # URIs are partial
    - match: '\b(/[\w\-.]+|/{\??\w+(=[^\s/]+)?}|/)+\b'
      scope: uri.routex

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.routex

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '["'']'
      scope: punctuation.definition.string.begin.routex
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.routex
    - match: '\.'
      scope: constant.character.escape.routex
    - match: '["'']'
      scope: punctuation.definition.string.end.routex
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '(//|#)'
      scope: punctuation.definition.comment.routex
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.routex
        - match: $\n?
          pop: true
    - match: '/\*'
      scope: punctuation.definition.comment.routex
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.block.double-slash.routex
        - match: '\*/'
          pop: true

